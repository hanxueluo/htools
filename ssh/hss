#!/usr/bin/env bash
PROCESS=$0

cd $(dirname $0)
source ./hguess
cd - >/dev/null

do_help() {
    cat <<EOF
 ssh:
    hss IP [fxxk] [CMDLINE]                     # ssh without password; 'fxxk' try possible pwds

 hss through middle ip:
    MIDDLE_IP=\$middle_ip hss ...                # set env MIDDLE_IP before hss; file transfer is not support

 file transfer:
    hss u IP LocalFile/Directory  RemotePath               # upload a file or directory
    hss d IP RemoteFile/Directory LocalPath                # download; "RemoteDirectory" should end with '/'

 operate on multiple ips:
    hss   IP1 IP2 [...] --- [fxxk] [CMDLINE]               # operate on multiple ips
    hss u IP1 IP2 [...] --- LocalFile/Directory RmotePath  # upload to multiple ips; download is not support

 configuration:
    env  DEFAULT_PASSWD                         # password used by default
    env  TRY_PASSWD                             # passwords used to try; delimied by " "
    file \$PWD/.hguess_conf                      # if no env specified, variable in file will be used
    file ~/.hss_pw_dict                         # host-password dictionary cache file

 requirements/todos:
    - download from multiple ips
    - file transfer passthrough middle ip
    - specify ssh option
EOF
    exit
}

ACTION=ssh

PASSWORD=
_execute() {
    if test -n "$PASSWORD";then
        set -x
        exec $SSHPASS_BIN -p "$PASSWORD" "$@"
    else
        set -x
        exec "$@"
    fi
}

use_pseudo_tty() {
    local cmd=$1
    if [ "$cmd" = ssh -o "$cmd" = scp -o "$cmd" = sshpass -o "$cmd" = hss -o "$cmd" = hto ];then
        return 0
    fi
    if [[ "$cmd" == */hss || "$cmd" == */hto || "$cmd" == */sshpass ]];then
        return 0
    fi
    return 1
}

do_each_action() {
    local dst="$1"
    local res=$(do_guess $dst)
    if test -z "$res";then
        exit 1
    fi
    shift
    read dst_ip passwd <<<"$res"
    PASSWORD=$passwd
    if [ "$ACTION" = ssh ];then
        local pseudotty=
        if use_pseudo_tty $1;then
            pseudotty=-tt
        fi
        _execute ssh $pseudotty -oStrictHostKeyChecking=no $dst_ip "$@"
    elif [ "$ACTION" = upload ];then
        local src="$1" local dst="$2"

        test -n "$dst" || dst=/root/

        if test -f "$src";then
            _execute scp -oStrictHostKeyChecking=no $src "[$dst_ip]":"$dst"
        elif test -d "$src";then
            local src_parent=$(dirname $src)
            local src_filename=$(basename $src)

            tar czf - -C "$src_parent" "$src_filename" | _execute ssh -oStrictHostKeyChecking=no "$dst_ip" "cd $dst && tar zxf -"
        fi
    elif [ "$ACTION" = download ];then
        local src="$1"
        local dst="$2"

        local src_parent=$(dirname $src)
        local src_filename=$(basename $src)

        test -n "$dst" || dst=./


        if [[ "$src" == */ ]];then
            _execute ssh -oStrictHostKeyChecking=no "$dst_ip" tar czf - -C "$src_parent" "$src_filename"  \
                | { cd "$dst" && tar zxf - ; }
        else
            _execute scp -oStrictHostKeyChecking=no [$dst_ip]:$src "$dst"
        fi
    elif [ "$ACTION" = fxxk ];then
        update_ssh_known_hosts $dst_ip
        if pw=$(try_pws $dst_ip $passwd);then
            update_dict_file $dst $dst_ip $pw
            shift
            exec $PROCESS $dst "$@"
        else
            echo "all guesses fail: $pw."
            echo "current guess:"
            echo "  DEFAULT_PASSWD=$DEFAULT_PASSWD;TRY_PASSWD=$TRY_PASSWD"
            echo "try new guess:"
            echo "  export DEFAULT_PASSWD="
            echo "  export TRY_PASSWD="
        fi
    fi
    exit
}

do_action() {
    local hasSplit=0
    for arg in "$@"
    do
        if [ "X$arg" = "X---" ];then
            hasSplit=1
            break
        fi
    done

    if [ "$hasSplit" = 0 ];then
        do_each_action "$@"
        return
    fi

    local arg0="$@"
    local dsts=
    while [ -n "$1" ]
    do
        if [ "X$1" = "X---" ];then
            hasSplit=1
            shift
            break
        fi
        dsts="$dsts $1"
        shift
    done

    # Workaroud: fix action for multiple ips
    if [ "$1"  = fxxk ];then
        ACTION=fxxk
        # exit ssh session if multiple ips
        if [ -z "$2" ];then
            set -- fxxk exit
        fi
    fi

    for ip in $dsts
    do
        (do_each_action $ip "$@")
    done
    exit
}

if [ "$1"  = "-h" -o -z "$1" ];then
    do_help
    exit
fi

if [ -n "$MIDDLE_IP" ];then
    mip=$MIDDLE_IP
    export MIDDLE_IP=
    set -x
    exec $PROCESS $mip "~/htools/hss" "$@"
fi

if [ "$1" = u ];then
    ACTION=upload
    shift
elif [ "$1" = d ];then
    ACTION=download
    shift
elif [ "$2"  = fxxk ];then
    ACTION=fxxk
fi

do_action "$@"
