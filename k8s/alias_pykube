#!/usr/bin/env bash


_k_do() {
    $PYKUBE "$@"
}

_k_watch_and_diff() {
    _k_do yaml "$@" -w | _k_do watchdiff
}

_k_scale() {
    local kind="$1"
    local object="$2"
    local num="$3"
    shift
    shift
    shift
    _k_do scale "$kind" "$object" --replicas="$num" "$@"
}

_k_recreate_file() {
    kubectl delete -f "$@"
    echo ============
    kubectl create -f "$@"
}

declare -A ACTION_DICT
ACTION_DICT[g]=get
ACTION_DICT[d]=describe
ACTION_DICT[e]=edit
ACTION_DICT[y]=yaml
ACTION_DICT[dd]=delete
_k_kube_alias() {
    local r=$1
    local resource=$2
    local actions=$3

    if [ "$r" = "#" ];then
        return
    fi
    for a in $(echo $actions| tr ',' ' ')
    do
        local action=${ACTION_DICT[$a]}
        test -n "$action" || continue
        eval "alias k$a$r=\"_k_do $action $resource"\"
    done
    eval "alias km$r=\"_k_watch_and_diff $resource"\"
}

kubealias() {
    _k_kube_alias "$@" g,d,y,e,dd
}

_k_setup_kubectl_alias() {
    PYKUBE=
    for pykube in $ /root/hroot/htools/k8s/pykube ~/work/htools/k8s/pykube ~/htools/k8s/pykube
    do
        if test -e "$pykube";then
            PYKUBE=$pykube
            break
        fi
    done

    if test -z "$PYKUBE";then
        return
    fi


    while read r resource actions
    do
        _k_kube_alias $r $resource $actions
    done < <(
    cat <<EOF
p pod g,d,y,e,dd
s svc g,d,y,e,dd
d deployment g,d,y,e,dd
j job g,d,y,e,dd
# i ingress g,d,y,e,dd
i ingresses.v1.networking.k8s.io g,d,y,e,dd
r release g,d,y,e,dd
c configmap g,d,y,e,dd
l loadbalancers g,d,y,e,dd
a all g,d,y,-,dd
n node g,d,y,e,_
na net-attach-def g,d,y,e,dd
nw net g,d,y,e,dd
vwc validatingwebhookconfiguration g,d,y,e,dd
mwc mutatingwebhookconfiguration g,d,y,e,dd
eps endpointslice g,d,y,_,_
ip ipresource g,d,y,e,dd
EOF
)
    alias kg="_k_do get"
    alias kd="_k_do describe"
    alias ke="_k_do edit"
    alias ky="_k_do yaml"
    alias kdd-="_k_do delete"
    alias km="_k_watch_and_diff"

    ## pod
    alias klp="_k_do logs pod"
    alias kx="_k_do exec pod"
    alias ku="_k_do upload pod"
    alias ko="_k_do download pod"

    alias kfc="kubectl create -f"
    alias kfd="kubectl delete -f"
    alias kfp="kubectl patch -f"
    alias kfa="kubectl apply -f"
    alias kfr="_k_recreate_file"

    alias ksd="_k_scale deployment"
    alias ksts="_k_scale sts"

    ## kubectl -n kube-system
    alias ks="kubectl -n kube-system"
    alias kpy="_k_do"

    ## basic alias
    alias k="_k_do"
}

_k_setup_docker_alias() {
    local PYDOCKER=
    for file in /root/hroot/htools/k8s/pydocker ~/work/htools/k8s/pydocker ~/htools/k8s/pydocker
    do
        if test -e "$file";then
            PYDOCKER=$file
            break
        fi
    done

    if test -n "$PYDOCKER";then
        alias doc="$PYDOCKER container"
        alias doi="$PYDOCKER image"
    fi
}

_k_setup_finch_alias() {
    local PYDOCKER=
    for file in /root/hroot/htools/k8s/pydocker ~/work/htools/k8s/pydocker ~/htools/k8s/pydocker
    do
        if test -e "$file";then
            PYDOCKER=$file
            break
        fi
    done

    if test -n "$PYDOCKER";then
        alias fic="CONTAINERCLI=finch $PYDOCKER container"
        alias fii="CONTAINERCLI=finch $PYDOCKER image"
    fi
}

_k_setup_crictl_alias() {
    local PYFILE=
    for file in /root/hroot/htools/pycrictl ~/work/htools/pycrictl ~/htools/pycrictl
    do
        if test -e "$file";then
            PYFILE=$file
            break
        fi
    done

    if test -n "$PYFILE";then
        alias cri="$PYFILE"
        alias crc="$PYFILE container"
        alias crp="$PYFILE pod"
        alias crm="$PYFILE image"
    fi
}


_k_config_ls() {
    {
    find ~/cloudinfo/vol/ -type f
    find ~/cloudinfo/ali/kubeconfig/ -type f
    find /etc/kubernetes/kubelet.conf -type f
    } 2>/dev/null | cat -b | tee /tmp/tmp_kube_config_ls
}

kconfig() {
    local file=$1
    local action=$2
    if [ "$file" = "" ];then
        _k_config_ls
        return
    fi

    #file2=$(cat /tmp/tmp_kube_config_ls |grep "^$file\b")
    file2=$(cat /tmp/tmp_kube_config_ls |awk -v file=$file '$1==file {print $2}')
    if [ "$file2" = "" ];then
        echo "kubeconfig {$file} not found in /tmp/tmp_kube_config_ls"
        return
    fi
    if [ "$action" = "cp" ];then
        echo "kubeconfig: cp $file2 ~/.kube/config"
        mkdir -p ~/.kube/
        cp $file2 ~/.kube/config
        unset KUBECONFIG
    else
        echo "kubeconfig: export KUBECONFIG=$file2"
        export KUBECONFIG=$file2
    fi
}

_k_setup_kubectl_alias
_k_setup_docker_alias
_k_setup_finch_alias
_k_setup_crictl_alias
